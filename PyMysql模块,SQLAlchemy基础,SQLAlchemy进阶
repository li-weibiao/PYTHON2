NSD Python2 DAY04
1.	案例1：向表中添加数据 
2.	案例2：创建表 
3.	案例3：添加数据 
4.	案例4：操作数据 
1 案例1：向表中添加数据
1.1 问题
1.	向employees表插入数据 
2.	向salary表插入数据 
3.	插入的数据需要commit到数据库中 
1.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：PyMySQL安装
1) 安装gcc，有些软件包是C的源码
1.	[root@localhost ~]# yum install -y gcc
2.	已加载插件：fastestmirror, langpacks
3.	dvd                                                      | 3.6 kB     00:00     
4.	Loading mirror speeds from cached hostfile
5.	匹配 gcc-4.8.5-16.el7.x86_64 的软件包已经安装。正在检查更新。
6.	无须任何处理
2)为了加速下载，可以使用国内开源镜像站点
1.	[root@localhost ~]# mkdir ~/.pip
2.	[root@localhost ~]# vim ~/.pip/pip.conf
3.	[global]
4.	index-url = http://pypi.douban.com/simple/
5.	[install]
6.	trusted-host=pypi.douban.com
3)安装pymysql
1.	[root@localhost ~]# pip3 install pymysql
步骤二：安装mariadb-server
1.	[root@localhost ~]# yum install –y mariadb-server
2.	
3.	....
4.	
5.	已安装：
6.	        mariadb-server.x86_64 1:5.5.56-2.el7
7.	
8.	作为依赖被安装：
9.	        mariadb.x86_64 1:5.5.56-2.el7
10.	        perl-DBD-MySQL. x86_64 0:4.023-5.el7
11.	
12.	完毕！
13.	[root@localhost ~]# systemctl start mariadb
14.	[root@localhost ~]# systemctl enable mariadb
15.	[root@localhost ~]# mysqladmin password tedu.cn
步骤三：创建数据库
1)创建数据库
1.	[root@localhost ~]# mysql -uroot -ptedu.cn    
2.	MariaDB [(none)]> CREATE DATABASE tedu DEFAULT CHARSET 'utf8';
3.	Query OK, 1 row affected (0.00 sec)
2)创建部门表
部门表字段：部门ID、部门名称
1.	MariaDB [(none)]> USE tedu;
2.	Database changed
3.	MariaDB [tedu]> CREATE TABLE departments(dep_id INT PRIMARY KEY, dep_name VARCHAR(20));
4.	Query OK, 0 rows affected (0.04 sec)
3)创建员工表
员工表字段：员工编号、姓名、出生日期、部门ID、电话号码、email、引用外键id
1.	MariaDB [tedu]> CREATE TABLE employees (emp_id INT PRIMARY KEY, emp_name VARCHAR(20) NOT NULL, birth_date DATE, phone CHAR(11), email VARCHAR(50), dep_id INT, FOREIGN KEY(dep_id) REFERENCES departments(dep_id));
2.	Query OK, 0 rows affected (0.05 sec)
4)创建工资表
工资表字段：auto_id、员工编号、日期、基本工资、奖金、工资总和
1.	MariaDB [tedu]> CREATE TABLE salary(auto_id INT AUTO_INCREMENT PRIMARY KEY, date DATE, emp_id INT, basic INT, awards INT, FOREIGN KEY(emp_id) REFERENCES employees(emp_id));
2.	Query OK, 0 rows affected (0.05 sec)
步骤四：向departments表插入数据
1)新建insert_data.py文件，编写代码如下：
1.	[root@localhost day10]# vim insert_data.py
2.	
3.	import pymysql
4.	1)连接数据库
5.	conn = pymysql.connect(
6.	    host='127.0.0.1',        #连接ip
7.	    port=3306,            #端口号
8.	    user='root',            #数据库用户名
9.	    passwd='tedu.cn',        #数据库密码
10.	    db='tedu',            #数据库名
11.	    charset='utf8'        #设置了数据库的字符集
12.	)
13.	2)创建游标
14.	cursor = conn.cursor()
15.	3)向部门表departments中插入数据
16.	insert1 = "INSERT INTO departments(dep_id, dep_name) VALUES(%s, %s)"
17.	result = cursor.execute(insert1, (1, '人事部'))        # execute执行insert语句
18.	4)将更新提交到数据库
19.	conn.commit()    
20.	5)关闭游标
21.	cursor.close()
22.	6)关闭数据库连接
23.	conn.close()
2)执行insert_data.py文件：
1.	[root@localhost day10]# python3 insert_data.py
3)登录mariadb查看结果：
1.	MariaDB [tedu]>> select * from departments;
2.	+--------+-----------+
3.	| dep_id | dep_name  |
4.	+--------+-----------+
5.	|      1  |  人事部    |
6.	+--------+-----------+
7.	1 row in set (0.00 sec) 
4) 向部门表departments中插入数据还可以用如下方法：
1.	#以上insert_data.py文件第3步可用如下代码替换：
2.	
3.	insert1 = "INSERT INTO departments(dep_id, dep_name) VALUES(%s, %s)"
4.	data = [(2, '运维部'), (3, '开发部')]
5.	cursor.executemany(insert1, data)
mariadb查看结果如下：
1.	MariaDB [tedu]>> select * from departments;
2.	+--------+-----------+
3.	| dep_id | dep_name  |
4.	+--------+-----------+
5.	|      1  |  人事部    |
6.	|      2  |  运维部    |
7.	|      3  |  开发部    |
8.	+--------+-----------+
9.	3 rows in set (0.01 sec)
步骤五：向employees表插入数据
1)新建insert_emp.py文件，编写代码如下：
1.	[root@localhost day10]# vim insert_emp.py
2.	
3.	import pymysql
4.	1)连接数据库
5.	conn = pymysql.connect(
6.	    host='127.0.0.1',        #连接ip
7.	    port=3306,            #端口号
8.	    user='root',            #数据库用户名
9.	    passwd='tedu.cn',        #数据库密码
10.	    db='tedu',            #数据库名
11.	    charset='utf8'        #设置了数据库的字符集
12.	)
13.	2)创建游标
14.	cursor = conn.cursor()
15.	3)向部门表employees中插入数据
16.	insert1 = "INSERT INTO employees(emp_id, emp_name, birth_date,phone, email, dep_id) VALUES(%s, %s, %s, %s, %s, %s)"
17.	result = cursor.execute(insert1, (1, '王君', '2018-9-30',\
18.	 '15678789090', 'wj@163.com', 3))        # execute执行insert语句
19.	4)将更新提交到数据库
20.	conn.commit()    
21.	5)关闭游标
22.	cursor.close()
23.	6)关闭数据库连接
24.	conn.close()
2)执行insert_emp.py文件：
1.	[root@localhost day10]# python3 insert_emp.py
3)登录mariadb查看结果：
1.	MariaDB [tedu]>> select * from employees;
2.	+--------+----------+------------+-------------+------------+--------+
3.	| emp_id | emp_name | birth_date |  phone       | email      | dep_id |
4.	+--------+----------+------------+-------------+------------+--------+
5.	|      1  |    王君   | 2018-09-30 | 15678789090 | wj@163.com |      3 |
6.	+--------+----------+------------+-------------+------------+--------+
7.	 1 row in set (0.00 sec) 
4) 向部门表employees中插入数据还可以用如下方法：
1.	#以上insert_emp.py文件第3步可用如下代码替换：
2.	
3.	insert1 = "INSERT INTO employees (dep_id, dep_name) VALUES(%s, %s)"
4.	data = [(2, '运维部'), (3, '开发部')]
5.	cursor.executemany(insert1, data)
mariadb查看结果如下：
1.	MariaDB [tedu]>> select * from departments;
2.	+--------+----------+------------+-------------+------------+--------+
3.	| emp_id | emp_name | birth_date |  phone       | email      | dep_id |
4.	+--------+----------+------------+-------------+------------+--------+
5.	|      1  |   王君    | 2018-09-30 | 15678789090 | wj@163.com |      3 |
6.	|      2  |   李雷    | 2018-09-30 | 15678789090 | wj@163.com |      2 |
7.	|      3  |   张美    | 2018-09-30 | 15678789090 | zm@163.com |      1 |
8.	+--------+----------+------------+-------------+------------+--------+
9.	3 rows in set (0.00 sec)
步骤六：向salary表插入数据
1)新建insert_sal.py文件，编写代码如下：
1.	[root@localhost day10]# vim insert_sal.py
2.	
3.	import pymysql
4.	1)连接数据库
5.	conn = pymysql.connect(
6.	    host='127.0.0.1',        #连接ip
7.	    port=3306,            #端口号
8.	    user='root',            #数据库用户名
9.	    passwd='tedu.cn',        #数据库密码
10.	    db='tedu',            #数据库名
11.	    charset='utf8'        #设置了数据库的字符集
12.	)
13.	2)创建游标
14.	cursor = conn.cursor()
15.	3)向部门表salary中插入数据
16.	insert2 = "INSERT INTO salary(date, emp_id,basic, awards) VALUES(%s, %s, %s, %s)"
17.	data = [('2018-9-30', 2, 1000, 2000), ('2018-9-30', 3, 3000, 6000),('2018-9-30', 1, 8000, 9000)]
18.	cursor.executemany(insert2, data)
19.	4)将更新提交到数据库
20.	conn.commit()    
21.	5)关闭游标
22.	cursor.close()
23.	6)关闭数据库连接
24.	conn.close()
2)执行insert_sal.py文件：
1.	[root@localhost day10]# python3 insert_sal.py
3)登录mariadb查看结果：
1.	MariaDB [tedu]>> select * from salary;
2.	+---------+------------+--------+-------+--------+
3.	| auto_id | date       | emp_id | basic | awards |
4.	+---------+------------+--------+-------+--------+
5.	|       1 | 2018-09-30 |      2  |  1000 |   2000 |
6.	|       2 | 2018-09-30 |      3  |  3000 |   6000 |
7.	|       3 | 2018-09-30 |      1  |  8000 |   9000 |
8.	+---------+------------+--------+-------+--------+
9.	3 rows in set (0.01 sec) 
2 案例2：创建表
2.1 问题
1.	创建employees表 
2.	创建部门表 
3.	创建salary表 
4.	表间创建恰当的关系 
2.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：SQLAlchemy安装
注意：sqlalchemy可以连接各种数据库
1.	[root@serwang ~]# pip3 install sqlalchemy
2.	Collecting sqlalchemy
3.	  Downloading http://pypi.doubanio.com/packages/aa/cc/48eec885d81f7260b07d
4.	961b3ececfc0aa82f7d4a8f45ff997e0d3f44ba/SQLAlchemy-1.2.11.tar.gz (5.6MB)
5.	...
6.	...
7.	Installing collected packages: sqlalchemy
8.	  Running setup.py install for sqlalchemy ... done
9.	Successfully installed sqlalchemy-1.2.11
10.	You are using pip version 9.0.1, however version 18.0 is available.
11.	You should consider upgrading via the 'pip install --upgrade pip' command.
步骤二：为SQLAlchemy创建数据库
1.	MariaDB [tedu]> CREATE DATABASE tarena DEFAULT CHARSET 'utf8';
步骤三：创建部门表，创建dbconn.py文件，编写如下代码：
1) 创建连接到数据库的引擎
1.	[root@localhost day10]# vim dbconn.py
2.	
3.	#!/usr/bin/env python3
4.	
5.	from sqlalchemy import create_engine
6.	
7.	# 创建连接到数据库的引擎
8.	engine = create_engine(
9.	        #指定数据库、用户名、密码、连接到哪台服务器、库名等信息
10.	    'mysql+pymysql://root:tedu.cn@localhost/tarena?charset=utf8',
11.	    encoding='utf8',
12.	    echo=True    #终端输出
13.	)        
2)创建ORM映射，生成ORM映射所需的基类
1.	from sqlalchemy.ext.declarative import declarative_base 
2.	
3.	Base = declarative_base()
3)自定义映射类，创建部门表
1.	from sqlalchemy import Column, String, Integer
2.	
3.	class Departments(Base):  # 必须继承于Base 
4.	    __tablename__ = 'departments'  # 库中的表名
5.	    # 每个属性都是表中的一个字段，是类属性
6.	    dep_id = Column(Integer, primary_key=True)    #Integer整数类型,primary_key主键
7.	    # String字符串类型，nullable非空约束，unique唯一性约束
8.	       dep_name = Column(String(20), nullable=False, unique=True)
9.	
10.	    def __str__(self):
11.	        return '[部门ID：%s, 部门名称：%s]' % (self.dep_id, self.dep_name)
12.	if __name__ == '__main__':
13.	    # 在数据库中创建表，如果库中已有同名的表，将不会创建
14.	    Base.metadata.create_all(engine)
4)测试脚本执行，生成部门表
1.	[root@localhost day10]# python3 dbconn.py    #成功生成部门表
5)进入数据库查看结果
1.	#登录数据库
2.	[root@localhost day10]# mysql -uroot -ptedu.cn    
3.	Welcome to the MariaDB monitor.  Commands end with ; or \g.
4.	Your MariaDB connection id is 5
5.	Server version: 5.5.56-MariaDB MariaDB Server
6.	
7.	Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.
8.	
9.	Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
10.	#查看数据库表
11.	MariaDB [(none)]> use tarena;
12.	Reading table information for completion of table and column names
13.	You can turn off this feature to get a quicker startup with -A
14.	
15.	Database changed
16.	MariaDB [tarena]> show tables;
17.	+------------------+
18.	| Tables_in_tarena |
19.	+------------------+
20.	| departments      |
21.	+------------------+
22.	1 row in set (0.00 sec)
23.	
24.	Top
25.	NSD Python2 DAY04
26.	
27.	    案例1：向表中添加数据
28.	    案例2：创建表
29.	    案例3：添加数据
30.	    案例4：操作数据
31.	
32.	1 案例1：向表中添加数据
33.	1.1 问题
34.	
35.	    向employees表插入数据
36.	    向salary表插入数据
37.	    插入的数据需要commit到数据库中
38.	
39.	1.2 步骤
40.	
41.	实现此案例需要按照如下步骤进行。
42.	
43.	步骤一：PyMySQL安装
44.	
45.	1) 安装gcc，有些软件包是C的源码
46.	
47.	    [root@localhost ~]# yum install -y gcc
48.	    已加载插件：fastestmirror, langpacks
49.	    dvd                                                      | 3.6 kB     00:00     
50.	    Loading mirror speeds from cached hostfile
51.	    匹配 gcc-4.8.5-16.el7.x86_64 的软件包已经安装。正在检查更新。
52.	    无须任何处理
53.	
54.	2)为了加速下载，可以使用国内开源镜像站点
55.	
56.	    [root@localhost ~]# mkdir ~/.pip
57.	    [root@localhost ~]# vim ~/.pip/pip.conf
58.	    [global]
59.	    index-url = http://pypi.douban.com/simple/
60.	    [install]
61.	    trusted-host=pypi.douban.com
62.	
63.	3)安装pymysql
64.	
65.	    [root@localhost ~]# pip3 install pymysql
66.	
67.	步骤二：安装mariadb-server
68.	
69.	    [root@localhost ~]# yum install –y mariadb-server
70.	    ....
71.	    已安装：
72.	            mariadb-server.x86_64 1:5.5.56-2.el7
73.	    作为依赖被安装：
74.	            mariadb.x86_64 1:5.5.56-2.el7
75.	            perl-DBD-MySQL. x86_64 0:4.023-5.el7
76.	    完毕！
77.	    [root@localhost ~]# systemctl start mariadb
78.	    [root@localhost ~]# systemctl enable mariadb
79.	    [root@localhost ~]# mysqladmin password tedu.cn
80.	
81.	步骤三：创建数据库
82.	
83.	1)创建数据库
84.	
85.	    [root@localhost ~]# mysql -uroot -ptedu.cn    
86.	    MariaDB [(none)]> CREATE DATABASE tedu DEFAULT CHARSET 'utf8';
87.	    Query OK, 1 row affected (0.00 sec)
88.	
89.	2)创建部门表
90.	
91.	部门表字段：部门ID、部门名称
92.	
93.	    MariaDB [(none)]> USE tedu;
94.	    Database changed
95.	    MariaDB [tedu]> CREATE TABLE departments(dep_id INT PRIMARY KEY, dep_name VARCHAR(20));
96.	    Query OK, 0 rows affected (0.04 sec)
97.	
98.	3)创建员工表
99.	
100.	员工表字段：员工编号、姓名、出生日期、部门ID、电话号码、email、引用外键id
101.	
102.	    MariaDB [tedu]> CREATE TABLE employees (emp_id INT PRIMARY KEY, emp_name VARCHAR(20) NOT NULL, birth_date DATE, phone CHAR(11), email VARCHAR(50), dep_id INT, FOREIGN KEY(dep_id) REFERENCES departments(dep_id));
103.	    Query OK, 0 rows affected (0.05 sec)
104.	
105.	4)创建工资表
106.	
107.	工资表字段：auto_id、员工编号、日期、基本工资、奖金、工资总和
108.	
109.	    MariaDB [tedu]> CREATE TABLE salary(auto_id INT AUTO_INCREMENT PRIMARY KEY, date DATE, emp_id INT, basic INT, awards INT, FOREIGN KEY(emp_id) REFERENCES employees(emp_id));
110.	    Query OK, 0 rows affected (0.05 sec)
111.	
112.	步骤四：向departments表插入数据
113.	
114.	1)新建insert_data.py文件，编写代码如下：
115.	
116.	    [root@localhost day10]# vim insert_data.py
117.	    import pymysql
118.	    1)连接数据库
119.	    conn = pymysql.connect(
120.	        host='127.0.0.1',        #连接ip
121.	        port=3306,            #端口号
122.	        user='root',            #数据库用户名
123.	        passwd='tedu.cn',        #数据库密码
124.	        db='tedu',            #数据库名
125.	        charset='utf8'        #设置了数据库的字符集
126.	    )
127.	    2)创建游标
128.	    cursor = conn.cursor()
129.	    3)向部门表departments中插入数据
130.	    insert1 = "INSERT INTO departments(dep_id, dep_name) VALUES(%s, %s)"
131.	    result = cursor.execute(insert1, (1, '人事部'))        # execute执行insert语句
132.	    4)将更新提交到数据库
133.	    conn.commit()    
134.	    5)关闭游标
135.	    cursor.close()
136.	    6)关闭数据库连接
137.	    conn.close()
138.	
139.	2)执行insert_data.py文件：
140.	
141.	    [root@localhost day10]# python3 insert_data.py
142.	
143.	3)登录mariadb查看结果：
144.	
145.	    MariaDB [tedu]>> select * from departments;
146.	    +--------+-----------+
147.	    | dep_id | dep_name  |
148.	    +--------+-----------+
149.	    |      1  |  人事部    |
150.	    +--------+-----------+
151.	    1 row in set (0.00 sec) 
152.	
153.	4) 向部门表departments中插入数据还可以用如下方法：
154.	
155.	    #以上insert_data.py文件第3步可用如下代码替换：
156.	    insert1 = "INSERT INTO departments(dep_id, dep_name) VALUES(%s, %s)"
157.	    data = [(2, '运维部'), (3, '开发部')]
158.	    cursor.executemany(insert1, data)
159.	
160.	mariadb查看结果如下：
161.	
162.	    MariaDB [tedu]>> select * from departments;
163.	    +--------+-----------+
164.	    | dep_id | dep_name  |
165.	    +--------+-----------+
166.	    |      1  |  人事部    |
167.	    |      2  |  运维部    |
168.	    |      3  |  开发部    |
169.	    +--------+-----------+
170.	    3 rows in set (0.01 sec)
171.	
172.	步骤五：向employees表插入数据
173.	
174.	1)新建insert_emp.py文件，编写代码如下：
175.	
176.	    [root@localhost day10]# vim insert_emp.py
177.	    import pymysql
178.	    1)连接数据库
179.	    conn = pymysql.connect(
180.	        host='127.0.0.1',        #连接ip
181.	        port=3306,            #端口号
182.	        user='root',            #数据库用户名
183.	        passwd='tedu.cn',        #数据库密码
184.	        db='tedu',            #数据库名
185.	        charset='utf8'        #设置了数据库的字符集
186.	    )
187.	    2)创建游标
188.	    cursor = conn.cursor()
189.	    3)向部门表employees中插入数据
190.	    insert1 = "INSERT INTO employees(emp_id, emp_name, birth_date,phone, email, dep_id) VALUES(%s, %s, %s, %s, %s, %s)"
191.	    result = cursor.execute(insert1, (1, '王君', '2018-9-30',\
192.	     '15678789090', 'wj@163.com', 3))        # execute执行insert语句
193.	    4)将更新提交到数据库
194.	    conn.commit()    
195.	    5)关闭游标
196.	    cursor.close()
197.	    6)关闭数据库连接
198.	    conn.close()
199.	
200.	2)执行insert_emp.py文件：
201.	
202.	    [root@localhost day10]# python3 insert_emp.py
203.	
204.	3)登录mariadb查看结果：
205.	
206.	    MariaDB [tedu]>> select * from employees;
207.	    +--------+----------+------------+-------------+------------+--------+
208.	    | emp_id | emp_name | birth_date |  phone       | email      | dep_id |
209.	    +--------+----------+------------+-------------+------------+--------+
210.	    |      1  |    王君   | 2018-09-30 | 15678789090 | wj@163.com |      3 |
211.	    +--------+----------+------------+-------------+------------+--------+
212.	     1 row in set (0.00 sec) 
213.	
214.	4) 向部门表employees中插入数据还可以用如下方法：
215.	
216.	    #以上insert_emp.py文件第3步可用如下代码替换：
217.	    insert1 = "INSERT INTO employees (dep_id, dep_name) VALUES(%s, %s)"
218.	    data = [(2, '运维部'), (3, '开发部')]
219.	    cursor.executemany(insert1, data)
220.	
221.	mariadb查看结果如下：
222.	
223.	    MariaDB [tedu]>> select * from departments;
224.	    +--------+----------+------------+-------------+------------+--------+
225.	    | emp_id | emp_name | birth_date |  phone       | email      | dep_id |
226.	    +--------+----------+------------+-------------+------------+--------+
227.	    |      1  |   王君    | 2018-09-30 | 15678789090 | wj@163.com |      3 |
228.	    |      2  |   李雷    | 2018-09-30 | 15678789090 | wj@163.com |      2 |
229.	    |      3  |   张美    | 2018-09-30 | 15678789090 | zm@163.com |      1 |
230.	    +--------+----------+------------+-------------+------------+--------+
231.	    3 rows in set (0.00 sec)
232.	
233.	步骤六：向salary表插入数据
234.	
235.	1)新建insert_sal.py文件，编写代码如下：
236.	
237.	    [root@localhost day10]# vim insert_sal.py
238.	    import pymysql
239.	    1)连接数据库
240.	    conn = pymysql.connect(
241.	        host='127.0.0.1',        #连接ip
242.	        port=3306,            #端口号
243.	        user='root',            #数据库用户名
244.	        passwd='tedu.cn',        #数据库密码
245.	        db='tedu',            #数据库名
246.	        charset='utf8'        #设置了数据库的字符集
247.	    )
248.	    2)创建游标
249.	    cursor = conn.cursor()
250.	    3)向部门表salary中插入数据
251.	    insert2 = "INSERT INTO salary(date, emp_id,basic, awards) VALUES(%s, %s, %s, %s)"
252.	    data = [('2018-9-30', 2, 1000, 2000), ('2018-9-30', 3, 3000, 6000),('2018-9-30', 1, 8000, 9000)]
253.	    cursor.executemany(insert2, data)
254.	    4)将更新提交到数据库
255.	    conn.commit()    
256.	    5)关闭游标
257.	    cursor.close()
258.	    6)关闭数据库连接
259.	    conn.close()
260.	
261.	2)执行insert_sal.py文件：
262.	
263.	    [root@localhost day10]# python3 insert_sal.py
264.	
265.	3)登录mariadb查看结果：
266.	
267.	    MariaDB [tedu]>> select * from salary;
268.	    +---------+------------+--------+-------+--------+
269.	    | auto_id | date       | emp_id | basic | awards |
270.	    +---------+------------+--------+-------+--------+
271.	    |       1 | 2018-09-30 |      2  |  1000 |   2000 |
272.	    |       2 | 2018-09-30 |      3  |  3000 |   6000 |
273.	    |       3 | 2018-09-30 |      1  |  8000 |   9000 |
274.	    +---------+------------+--------+-------+--------+
275.	    3 rows in set (0.01 sec) 
276.	
277.	2 案例2：创建表
278.	2.1 问题
279.	
280.	    创建employees表
281.	    创建部门表
282.	    创建salary表
283.	    表间创建恰当的关系
284.	
285.	2.2 步骤
286.	
287.	实现此案例需要按照如下步骤进行。
288.	
289.	步骤一：SQLAlchemy安装
290.	
291.	注意：sqlalchemy可以连接各种数据库
292.	
293.	    [root@serwang ~]# pip3 install sqlalchemy
294.	    Collecting sqlalchemy
295.	      Downloading http://pypi.doubanio.com/packages/aa/cc/48eec885d81f7260b07d
296.	    961b3ececfc0aa82f7d4a8f45ff997e0d3f44ba/SQLAlchemy-1.2.11.tar.gz (5.6MB)
297.	    ...
298.	    ...
299.	    Installing collected packages: sqlalchemy
300.	      Running setup.py install for sqlalchemy ... done
301.	    Successfully installed sqlalchemy-1.2.11
302.	    You are using pip version 9.0.1, however version 18.0 is available.
303.	    You should consider upgrading via the 'pip install --upgrade pip' command.
304.	
305.	步骤二：为SQLAlchemy创建数据库
306.	
307.	    MariaDB [tedu]> CREATE DATABASE tarena DEFAULT CHARSET 'utf8';
308.	
309.	步骤三：创建部门表，创建dbconn.py文件，编写如下代码：
310.	
311.	1) 创建连接到数据库的引擎
312.	
313.	    [root@localhost day10]# vim dbconn.py
314.	    #!/usr/bin/env python3
315.	    from sqlalchemy import create_engine
316.	    # 创建连接到数据库的引擎
317.	    engine = create_engine(
318.	            #指定数据库、用户名、密码、连接到哪台服务器、库名等信息
319.	        'mysql+pymysql://root:tedu.cn@localhost/tarena?charset=utf8',
320.	        encoding='utf8',
321.	        echo=True    #终端输出
322.	    )        
323.	
324.	2)创建ORM映射，生成ORM映射所需的基类
325.	
326.	    from sqlalchemy.ext.declarative import declarative_base 
327.	    Base = declarative_base()
328.	
329.	3)自定义映射类，创建部门表
330.	
331.	    from sqlalchemy import Column, String, Integer
332.	    class Departments(Base):  # 必须继承于Base 
333.	        __tablename__ = 'departments'  # 库中的表名
334.	        # 每个属性都是表中的一个字段，是类属性
335.	        dep_id = Column(Integer, primary_key=True)    #Integer整数类型,primary_key主键
336.	        # String字符串类型，nullable非空约束，unique唯一性约束
337.	           dep_name = Column(String(20), nullable=False, unique=True)
338.	        def __str__(self):
339.	            return '[部门ID：%s, 部门名称：%s]' % (self.dep_id, self.dep_name)
340.	    if __name__ == '__main__':
341.	        # 在数据库中创建表，如果库中已有同名的表，将不会创建
342.	        Base.metadata.create_all(engine)
343.	
344.	4)测试脚本执行，生成部门表
345.	
346.	    [root@localhost day10]# python3 dbconn.py    #成功生成部门表
347.	
348.	5)进入数据库查看结果
349.	
350.	    #登录数据库
351.	    [root@localhost day10]# mysql -uroot -ptedu.cn    
352.	    Welcome to the MariaDB monitor.  Commands end with ; or \g.
353.	    Your MariaDB connection id is 5
354.	    Server version: 5.5.56-MariaDB MariaDB Server
355.	    Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.
356.	    Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
357.	    #查看数据库表
358.	    MariaDB [(none)]> use tarena;
359.	    Reading table information for completion of table and column names
360.	    You can turn off this feature to get a quicker startup with -A
361.	    Database changed
362.	    MariaDB [tarena]> show tables;
363.	    +------------------+
364.	    | Tables_in_tarena |
365.	    +------------------+
366.	    | departments      |
367.	    +------------------+
368.	    1 row in set (0.00 sec)
369.	    MariaDB [tarena]> show create table departments;
370.	    +-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
371.	    | Table       | Create Table                                                                                                                                                                                                    |
372.	    +-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
373.	    | departments | CREATE TABLE `departments` (
374.	      `dep_id` int(11) NOT NULL AUTO_INCREMENT,
375.	      `dep_name` varchar(20) NOT NULL,
376.	      PRIMARY KEY (`dep_id`),
377.	      UNIQUE KEY `dep_name` (`dep_name`)
378.	    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
379.	    +-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
380.	    1 row in set (0.00 sec)
381.	
382.	步骤四：创建员工表，在dbconn.py文件中添加如下数据：
383.	
384.	1)创建员工表
385.	
386.	    from sqlalchemy import ForeignKey    导入外键
387.	    class Employees(Base):  # 必须继承于Base
388.	        __tablename__ = 'employees'  # 库中的表名
389.	            # 每个属性都是表中的一个字段，是类属性
390.	        emp_id = Column(Integer, primary_key=True)     #Integer整数类型,primary_key主键
391.	        name = Column(String(20), nullable=False) # String字符串类型，nullable非空约束
392.	        gender = Column(String(6))
393.	        phone = Column(String(11))
394.	        email = Column(String(50))
395.	        dep_id = Column(Integer, ForeignKey('departments.dep_id'))    #与departments中dep_id做外键关联
396.	        def __str__(self):
397.	            return '员工：%s' % self.name
398.	
399.	4)测试脚本执行，生成员工表
400.	
401.	    [root@localhost day10]# python3 dbconn.py    #成功生成员工表
402.	
403.	5)进入数据库查看结果
404.	
405.	    #登录数据库
406.	    [root@localhost day10]# mysql -uroot -ptedu.cn    
407.	    Welcome to the MariaDB monitor.  Commands end with ; or \g.
408.	    Your MariaDB connection id is 5
409.	    Server version: 5.5.56-MariaDB MariaDB Server
410.	    Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.
411.	    Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
412.	    #查看数据库表
413.	    MariaDB [(none)]> use tarena;
414.	    Reading table information for completion of table and column names
415.	    You can turn off this feature to get a quicker startup with -A
416.	    Database changed
417.	    MariaDB [tarena]> show tables;
418.	    +------------------+
419.	    | Tables_in_tarena |
420.	    +------------------+
421.	    | departments       |
422.	    | employees         |
423.	    +------------------+
424.	    2 rows in set (0.00 sec)
425.	
426.	步骤五：创建工资表，在dbconn.py文件中添加如下数据：
427.	
428.	1)创建工资表
429.	
430.	    from sqlalchemy import Date    导入外键
431.	    class Employees(Base):  # 必须继承于Base
432.	        __tablename__ = 'employees'  # 库中的表名
433.	            # 每个属性都是表中的一个字段，是类属性
434.	        emp_id = Column(Integer, primary_key=True)     #Integer整数类型,primary_key主键
435.	        name = Column(String(20), nullable=False) # String字符串类型，nullable非空约束
436.	        gender = Column(String(6))
437.	        phone = Column(String(11))
438.	        email = Column(String(50))
439.	        dep_id = Column(Integer, ForeignKey('departments.dep_id'))    #与departments中dep_id做外键关联
440.	        def __str__(self):
441.	            return '员工：%s' % self.name
442.	    class Salary(Base):  # 必须继承于Base
443.	        __tablename__ = 'salary'  # 库中的表名
444.	        auto_id = Column(Integer, primary_key=True) #Integer整数类型,primary_key主键
445.	        date = Column(Date)    #导入日期
446.	        emp_id = Column(Integer, ForeignKey('employees.emp_id')) #与employees中emp_id做外键关联
447.	        basic = Column(Integer)        #基本工资
448.	        awards = Column(Integer)    #奖金
449.	
450.	4)测试脚本执行，生成员工表
451.	
452.	    [root@localhost day10]# python3 dbconn.py    #成功生成工资表
453.	
454.	5)进入数据库查看结果
455.	
456.	    #登录数据库
457.	    [root@localhost day10]# mysql -uroot -ptedu.cn    
458.	    Welcome to the MariaDB monitor.  Commands end with ; or \g.
459.	    Your MariaDB connection id is 5
460.	    Server version: 5.5.56-MariaDB MariaDB Server
461.	    Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.
462.	    Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
463.	    #查看数据库表
464.	    MariaDB [(none)]> use tarena;
465.	    Reading table information for completion of table and column names
466.	    You can turn off this feature to get a quicker startup with -A
467.	    Database changed
468.	    MariaDB [tarena]> show tables;
469.	    +------------------+
470.	    | Tables_in_tarena |
471.	    +------------------+
472.	    | departments      |
473.	    | employees        |
474.	    | salary           |
475.	    +------------------+
476.	    3 rows in set (0.00 sec)
477.	
478.	3 案例3：添加数据
479.	3.1 问题
480.	
481.	    分别在部门表、员工表和工资表中加入数据
482.	    通过SQLAlchemy代码实现
483.	    分别练习每次加入一行数据和每次可加入多行数据
484.	
485.	3.2 步骤
486.	
487.	实现此案例需要按照如下步骤进行。
488.	
489.	步骤一：向部门表添加数据，创建add_department.py文件，添加如下代码：
490.	
491.	1)创建映射类的实例
492.	
493.	    [root@localhost day10]# vim add_department.py
494.	    from dbconn import Departments
495.	    hr = Departments(dep_id=1, dep_name='hr')
496.	    print(hr.dep_name)
497.	    print(hr.dep_id)
498.	
499.	测试执行结果：
500.	
501.	    [root@localhost day10]# python3 add_department.py
502.	    hr
503.	    1
504.	
505.	登录数据库查看，部门表中数据为空，此时，并不会真正在数据库表中添加记录
506.	
507.	    MariaDB [tarena]> select * from departments;
508.	    Empty set (0.00 sec)
509.	
510.	2) 想在数据库中添加数据需完成如下操作，创建会话类
511.	
512.	在dbconn.py文件中，添加如下代码：
513.	
514.	通过将sessionmaker与数据库引擎绑定，创建会话类Session
515.	
516.	    from sqlalchemy.orm import sessionmaker
517.	    Session = sessionmaker(bind=engine)    
518.	
519.	3)添加新对象
520.	
521.	在add_department.py文件中添加如下代码：
522.	
523.	    from dbconn import Departments, Session
524.	    session = Session()    #创建会话类实例
525.	    session.add(hr)    #向实例绑定的数据库添加数据
526.	    session.commit()    #将数据提交到实例对应数据库
527.	    session.close()    #关闭session类
528.	
529.	测试执行结果：
530.	
531.	    [root@localhost day10]# python3 add_department.py
532.	
533.	登录数据库查看部门表中数据
534.	
535.	    MariaDB [tarena]> select * from departments;
536.	    +--------+----------+
537.	    | dep_id | dep_name |
538.	    +--------+----------+
539.	    |      1 |  hr       |
540.	    +--------+----------+
541.	    1 row in set (0.01 sec)
542.	
543.	数据成功添加
544.	
545.	4)批量添加新数据
546.	
547.	在add_department.py文件中添加如下代码：
548.	
549.	    ops = Departments(dep_id=2, dep_name='operations')
550.	    dev = Departments(dep_id=3, dep_name='development')
551.	    finance = Departments(dep_id=4, dep_name='财务部')
552.	    deps = [ops, dev]
553.	    session = Session()
554.	    session.add_all(deps)        
555.	    session.add(finance)
556.	    session.commit()
557.	    session.close()
558.	
559.	此时注意：
560.	
561.	添加过的数据不要再添加，即将session.add（hr）注释掉。
562.	
563.	如果文件中有中文，注意在dbconn.py文件中，将engine的参数修改为如下代码：
564.	
565.	    engine=create_engine(
566.	    'mysql+pymysql://root:tedu.cn@localhost/tarena?charset=uU8',
567.	        encoding='uU8',
568.	        echo=True
569.	    )    
570.	
571.	测试执行结果：
572.	
573.	    [root@localhost day10]# python3 add_department.py
574.	
575.	登录数据库查看部门表中数据
576.	
577.	    MariaDB [tarena]> select * from departments;
578.	    +--------+-------------+
579.	    | dep_id | dep_name    |
580.	    +--------+-------------+
581.	    |      3 | development  |
582.	    |      1 | hr           |
583.	    |      2 | operations   |
584.	    |      4 | 财务部        |
585.	    +--------+-------------+
586.	    4 rows in set (0.00 sec)
587.	
588.	数据成功添加
589.	
590.	步骤二：向员工表批量添加数据，创建add_employees.py文件，添加如下代码：
591.	
592.	    from dbconn import Employees, Session
593.	    wj = Employees(
594.	        emp_id=1,name='王俊',gender='男',phone='15678789090',email='wj@163.com',    dep_id=3
595.	    )
596.	    wwc = Employees(
597.	        emp_id=2,name='吴伟超',gender='男',phone='13499887755',email='wwc@qq.com',    dep_id=3
598.	    )
599.	    dzj = Employees(
600.	        emp_id=3, name='董枝俊', gender='男', phone='18900998877', email='dzj@163.com', dep_id=3
601.	    )
602.	    ltd = Employees(
603.	            emp_id=4, name='李通达', gender='男', phone='13378904567', email='ltd@163.com', dep_id=2)
604.	    wxy = Employees(
605.	            emp_id=5, name='王秀燕', gender='女', phone='15098765432', email='wxy@tedu.cn', dep_id=2)
606.	    gq = Employees(
607.	            emp_id=6, name='高琦', gender='女', phone='15876543212', email='gq@tarena.com', dep_id=1)
608.	    wzf = Employees(
609.	             emp_id=7, name='王召飞', gender='男', phone='15609871234', email='wzf@sohu.com', dep_id=1)
610.	    sy = Employees(
611.	            emp_id=8, name='孙燕', gender='女', phone='18567895435', email='sy@163.com', dep_id=4)
612.	    gpf = Employees(
613.	            emp_id=9, name='高鹏飞', gender='男', phone='13566889900', email='gpf@163.com', dep_id=2)
614.	    emps = [wj, wwc, dzj, ltd, wxy, gq, wzf, sy, gpf]
615.	    session = Session()
616.	    session.add_all(emps)
617.	    session.commit()
618.	    session.close()
619.	
620.	测试执行结果：
621.	
622.	    [root@localhost day10]# python3 add_employees.py
623.	
624.	登录数据库查看部门表中数据
625.	
626.	    MariaDB [tarena]> select * from employees;
627.	    +--------+-----------+--------+-------------+---------------+--------+
628.	    | emp_id | name      | gender | phone       | email         | dep_id |
629.	    +--------+-----------+--------+-------------+---------------+--------+
630.	    |      1  |    王俊    |   男   | 15678789090 | wj@163.com    |      3 |
631.	    |      2  |   吴伟超   |   男   | 13499887755 | wwc@qq.com    |      3 |
632.	    |      3  |   董枝俊   |   男   | 18900998877 | dzj@163.com   |      3 |
633.	    |      4  |   李通达   |   男   | 13378904567 | ltd@163.com   |      2 |
634.	    |      5  |   王秀燕   |   女   | 15098765432 | wxy@tedu.cn   |      2 |
635.	    |      6  |    高琦    |   女   | 15876543212 | gq@tarena.com |      1 |
636.	    |      7  |   王召飞   |   男   | 15609871234 | wzf@sohu.com  |      1 |
637.	    |      8  |    孙燕    |   女   | 18567895435 | sy@163.com    |      4 |
638.	    |      9  |   高鹏飞   |   男   | 13566889900 | gpf@163.com   |      2 |
639.	    +--------+-----------+--------+-------------+---------------+--------+
640.	    9 rows in set (0.00 sec)
641.	
642.	数据成功添加
643.	
644.	步骤三：向工资表添加数据，创建add_ salary.py文件，添加如下代码：
645.	
646.	    from dbconn import Salary, Session
647.	    jan2018_1 = Salary(date='2018-01-10', emp_id=1, basic=10000, awards=2000)
648.	    jan2018_2 = Salary(date='2018-01-10', emp_id=2, basic=11000, awards=1500)
649.	    jan2018_3 = Salary(date='2018-01-10', emp_id=3, basic=11000, awards=2200)
650.	    jan2018_4 = Salary(date='2018-01-10', emp_id=4, basic=11000, awards=3000)
651.	    jan2018_5 = Salary(date='2018-01-10', emp_id=1, basic=13000, awards=2000)
652.	    jan2018_6 = Salary(date='2018-01-10', emp_id=6, basic=15000, awards=3000)
653.	    jan2018_7 = Salary(date='2018-01-10', emp_id=7, basic=9000, awards=3000)
654.	    jan2018_8 = Salary(date='2018-01-10', emp_id=8, basic=13000, awards=2000)
655.	    jan2018_9 = Salary(date='2018-01-10', emp_id=9, basic=13000, awards=1500)
656.	    session = Session()
657.	    sals = [jan2018_1, jan2018_2, jan2018_3,jan2018_4, jan2018_5, jan2018_6, jan2018_7, jan2018_8, jan2018_9]
658.	    session.add_all(sals)
659.	    session.commit()
660.	    session.close()
661.	
662.	测试执行结果：
663.	
664.	    [root@localhost day10]# python3 add_ salary.py
665.	
666.	登录数据库查看部门表中数据
667.	
668.	    MariaDB [tarena]> select * from salary;
669.	    +---------+------------+--------+-------+--------+
670.	    | auto_id | date       | emp_id | basic | awards |
671.	    +---------+------------+--------+-------+--------+
672.	    |       1 | 2018-01-10 |      1 | 10000 |   2000 |
673.	    |       2 | 2018-01-10 |      2 | 11000 |   1500 |
674.	    |       3 | 2018-01-10 |      3 | 11000 |   2200 |
675.	    |       4 | 2018-01-10 |      4 | 11000 |   3000 |
676.	    |       5 | 2018-01-10 |      1 | 13000 |   2000 |
677.	    |       6 | 2018-01-10 |      6 | 15000 |   3000 |
678.	    |       7 | 2018-01-10 |      7 |  9000 |   3000 |
679.	    |       8 | 2018-01-10 |      8 | 13000 |   2000 |
680.	    |       9 | 2018-01-10 |      9 | 13000 |   1500 |
681.	    +---------+------------+--------+-------+--------+
682.	    9 rows in set (0.00 sec)
683.	
684.	数据成功添加
685.	4 案例4：操作数据
686.	4.1 问题
687.	
688.	    修改部门表，将人事部改为人力资源部
689.	    如果存在设计部，将设计部删除
690.	    查询所有每个员工及其所在部门
691.	
692.	4.2 步骤
693.	
694.	实现此案例需要按照如下步骤进行。
695.	
696.	步骤一：修改表中的记录，首先需要把记录找到
697.	
698.	    qset12 = session.query(Department).filter(Department.dep_name=='人事部')
699.	    hr = qset12.one()
700.	
701.	步骤二：只要把映射的实体类对象重新赋值保存即可
702.	
703.	    hr.dep_name='人力资源部'
704.	    session.commit()
705.	
706.	步骤三：删除记录与修改类似，先找到记录再执行删除
707.	
708.	    qset13 = session.query(Employee).filter(Department.dep_name=='设计部')
709.	    dep = qset13.one()
710.	    session.delete(dep)
711.	    session.commit()
712.	
713.	步骤四：查询每个员工所在的部门涉及的是多表查询，因为员工表中只有部门ID，部门名称在部门表中存储
714.	
715.	    qset10 = session.query(Employee.emp_name, Department.dep_name).join(Department)
716.	    for row in qset10:
717.	        print(row)
718.	
719.	
720.	
721.	MariaDB [tarena]> show create table departments;
722.	+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
723.	| Table       | Create Table                                                                                                                                                                                                    |
724.	+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
725.	| departments | CREATE TABLE `departments` (
726.	  `dep_id` int(11) NOT NULL AUTO_INCREMENT,
727.	  `dep_name` varchar(20) NOT NULL,
728.	  PRIMARY KEY (`dep_id`),
729.	  UNIQUE KEY `dep_name` (`dep_name`)
730.	) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
731.	+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
732.	1 row in set (0.00 sec)
步骤四：创建员工表，在dbconn.py文件中添加如下数据：
1)创建员工表
1.	from sqlalchemy import ForeignKey    导入外键
2.	
3.	class Employees(Base):  # 必须继承于Base
4.	    __tablename__ = 'employees'  # 库中的表名
5.	        # 每个属性都是表中的一个字段，是类属性
6.	    emp_id = Column(Integer, primary_key=True)     #Integer整数类型,primary_key主键
7.	    name = Column(String(20), nullable=False) # String字符串类型，nullable非空约束
8.	    gender = Column(String(6))
9.	    phone = Column(String(11))
10.	    email = Column(String(50))
11.	    dep_id = Column(Integer, ForeignKey('departments.dep_id'))    #与departments中dep_id做外键关联
12.	
13.	    def __str__(self):
14.	        return '员工：%s' % self.name
4)测试脚本执行，生成员工表
1.	[root@localhost day10]# python3 dbconn.py    #成功生成员工表
5)进入数据库查看结果
1.	#登录数据库
2.	[root@localhost day10]# mysql -uroot -ptedu.cn    
3.	Welcome to the MariaDB monitor.  Commands end with ; or \g.
4.	Your MariaDB connection id is 5
5.	Server version: 5.5.56-MariaDB MariaDB Server
6.	
7.	Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.
8.	
9.	Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
10.	#查看数据库表
11.	MariaDB [(none)]> use tarena;
12.	Reading table information for completion of table and column names
13.	You can turn off this feature to get a quicker startup with -A
14.	
15.	Database changed
16.	MariaDB [tarena]> show tables;
17.	+------------------+
18.	| Tables_in_tarena |
19.	+------------------+
20.	| departments       |
21.	| employees         |
22.	+------------------+
23.	2 rows in set (0.00 sec)
步骤五：创建工资表，在dbconn.py文件中添加如下数据：
1)创建工资表
1.	from sqlalchemy import Date    导入外键
2.	
3.	class Employees(Base):  # 必须继承于Base
4.	    __tablename__ = 'employees'  # 库中的表名
5.	        # 每个属性都是表中的一个字段，是类属性
6.	    emp_id = Column(Integer, primary_key=True)     #Integer整数类型,primary_key主键
7.	    name = Column(String(20), nullable=False) # String字符串类型，nullable非空约束
8.	    gender = Column(String(6))
9.	    phone = Column(String(11))
10.	    email = Column(String(50))
11.	    dep_id = Column(Integer, ForeignKey('departments.dep_id'))    #与departments中dep_id做外键关联
12.	
13.	    def __str__(self):
14.	        return '员工：%s' % self.name
15.	
16.	class Salary(Base):  # 必须继承于Base
17.	    __tablename__ = 'salary'  # 库中的表名
18.	    auto_id = Column(Integer, primary_key=True) #Integer整数类型,primary_key主键
19.	    date = Column(Date)    #导入日期
20.	    emp_id = Column(Integer, ForeignKey('employees.emp_id')) #与employees中emp_id做外键关联
21.	    basic = Column(Integer)        #基本工资
22.	    awards = Column(Integer)    #奖金
4)测试脚本执行，生成员工表
1.	[root@localhost day10]# python3 dbconn.py    #成功生成工资表
5)进入数据库查看结果
1.	#登录数据库
2.	[root@localhost day10]# mysql -uroot -ptedu.cn    
3.	Welcome to the MariaDB monitor.  Commands end with ; or \g.
4.	Your MariaDB connection id is 5
5.	Server version: 5.5.56-MariaDB MariaDB Server
6.	
7.	Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.
8.	
9.	Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
10.	#查看数据库表
11.	MariaDB [(none)]> use tarena;
12.	Reading table information for completion of table and column names
13.	You can turn off this feature to get a quicker startup with -A
14.	
15.	Database changed
16.	MariaDB [tarena]> show tables;
17.	+------------------+
18.	| Tables_in_tarena |
19.	+------------------+
20.	| departments      |
21.	| employees        |
22.	| salary           |
23.	+------------------+
24.	3 rows in set (0.00 sec)
3 案例3：添加数据
3.1 问题
1.	分别在部门表、员工表和工资表中加入数据 
2.	通过SQLAlchemy代码实现 
3.	分别练习每次加入一行数据和每次可加入多行数据 
3.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：向部门表添加数据，创建add_department.py文件，添加如下代码：
1)创建映射类的实例
1.	[root@localhost day10]# vim add_department.py
2.	
3.	from dbconn import Departments
4.	
5.	hr = Departments(dep_id=1, dep_name='hr')
6.	print(hr.dep_name)
7.	print(hr.dep_id)
测试执行结果：
1.	[root@localhost day10]# python3 add_department.py
2.	hr
3.	1
登录数据库查看，部门表中数据为空，此时，并不会真正在数据库表中添加记录
1.	MariaDB [tarena]> select * from departments;
2.	Empty set (0.00 sec)
2) 想在数据库中添加数据需完成如下操作，创建会话类
在dbconn.py文件中，添加如下代码：
通过将sessionmaker与数据库引擎绑定，创建会话类Session
1.	from sqlalchemy.orm import sessionmaker
2.	Session = sessionmaker(bind=engine)    
3)添加新对象
在add_department.py文件中添加如下代码：
1.	from dbconn import Departments, Session
2.	
3.	session = Session()    #创建会话类实例
4.	session.add(hr)    #向实例绑定的数据库添加数据
5.	session.commit()    #将数据提交到实例对应数据库
6.	session.close()    #关闭session类
测试执行结果：
1.	[root@localhost day10]# python3 add_department.py
登录数据库查看部门表中数据
1.	MariaDB [tarena]> select * from departments;
2.	+--------+----------+
3.	| dep_id | dep_name |
4.	+--------+----------+
5.	|      1 |  hr       |
6.	+--------+----------+
7.	1 row in set (0.01 sec)
数据成功添加
4)批量添加新数据
在add_department.py文件中添加如下代码：
1.	ops = Departments(dep_id=2, dep_name='operations')
2.	dev = Departments(dep_id=3, dep_name='development')
3.	finance = Departments(dep_id=4, dep_name='财务部')
4.	deps = [ops, dev]
5.	session = Session()
6.	session.add_all(deps)        
7.	session.add(finance)
8.	session.commit()
9.	session.close()
此时注意：
添加过的数据不要再添加，即将session.add（hr）注释掉。
如果文件中有中文，注意在dbconn.py文件中，将engine的参数修改为如下代码：
1.	engine=create_engine(
2.	'mysql+pymysql://root:tedu.cn@localhost/tarena?charset=uU8',
3.	    encoding='uU8',
4.	    echo=True
5.	)    
测试执行结果：
1.	[root@localhost day10]# python3 add_department.py
登录数据库查看部门表中数据
1.	MariaDB [tarena]> select * from departments;
2.	+--------+-------------+
3.	| dep_id | dep_name    |
4.	+--------+-------------+
5.	|      3 | development  |
6.	|      1 | hr           |
7.	|      2 | operations   |
8.	|      4 | 财务部        |
9.	+--------+-------------+
10.	4 rows in set (0.00 sec)
数据成功添加
步骤二：向员工表批量添加数据，创建add_employees.py文件，添加如下代码：
1.	from dbconn import Employees, Session
2.	
3.	wj = Employees(
4.	    emp_id=1,name='王俊',gender='男',phone='15678789090',email='wj@163.com',    dep_id=3
5.	)
6.	wwc = Employees(
7.	    emp_id=2,name='吴伟超',gender='男',phone='13499887755',email='wwc@qq.com',    dep_id=3
8.	)
9.	dzj = Employees(
10.	    emp_id=3, name='董枝俊', gender='男', phone='18900998877', email='dzj@163.com', dep_id=3
11.	)
12.	ltd = Employees(
13.	        emp_id=4, name='李通达', gender='男', phone='13378904567', email='ltd@163.com', dep_id=2)
14.	wxy = Employees(
15.	        emp_id=5, name='王秀燕', gender='女', phone='15098765432', email='wxy@tedu.cn', dep_id=2)
16.	gq = Employees(
17.	        emp_id=6, name='高琦', gender='女', phone='15876543212', email='gq@tarena.com', dep_id=1)
18.	wzf = Employees(
19.	         emp_id=7, name='王召飞', gender='男', phone='15609871234', email='wzf@sohu.com', dep_id=1)
20.	sy = Employees(
21.	        emp_id=8, name='孙燕', gender='女', phone='18567895435', email='sy@163.com', dep_id=4)
22.	gpf = Employees(
23.	        emp_id=9, name='高鹏飞', gender='男', phone='13566889900', email='gpf@163.com', dep_id=2)
24.	emps = [wj, wwc, dzj, ltd, wxy, gq, wzf, sy, gpf]
25.	session = Session()
26.	session.add_all(emps)
27.	session.commit()
28.	session.close()
测试执行结果：
1.	[root@localhost day10]# python3 add_employees.py
登录数据库查看部门表中数据
1.	MariaDB [tarena]> select * from employees;
2.	+--------+-----------+--------+-------------+---------------+--------+
3.	| emp_id | name      | gender | phone       | email         | dep_id |
4.	+--------+-----------+--------+-------------+---------------+--------+
5.	|      1  |    王俊    |   男   | 15678789090 | wj@163.com    |      3 |
6.	|      2  |   吴伟超   |   男   | 13499887755 | wwc@qq.com    |      3 |
7.	|      3  |   董枝俊   |   男   | 18900998877 | dzj@163.com   |      3 |
8.	|      4  |   李通达   |   男   | 13378904567 | ltd@163.com   |      2 |
9.	|      5  |   王秀燕   |   女   | 15098765432 | wxy@tedu.cn   |      2 |
10.	|      6  |    高琦    |   女   | 15876543212 | gq@tarena.com |      1 |
11.	|      7  |   王召飞   |   男   | 15609871234 | wzf@sohu.com  |      1 |
12.	|      8  |    孙燕    |   女   | 18567895435 | sy@163.com    |      4 |
13.	|      9  |   高鹏飞   |   男   | 13566889900 | gpf@163.com   |      2 |
14.	+--------+-----------+--------+-------------+---------------+--------+
15.	9 rows in set (0.00 sec)
数据成功添加
步骤三：向工资表添加数据，创建add_ salary.py文件，添加如下代码：
1.	from dbconn import Salary, Session
2.	
3.	jan2018_1 = Salary(date='2018-01-10', emp_id=1, basic=10000, awards=2000)
4.	jan2018_2 = Salary(date='2018-01-10', emp_id=2, basic=11000, awards=1500)
5.	jan2018_3 = Salary(date='2018-01-10', emp_id=3, basic=11000, awards=2200)
6.	jan2018_4 = Salary(date='2018-01-10', emp_id=4, basic=11000, awards=3000)
7.	jan2018_5 = Salary(date='2018-01-10', emp_id=1, basic=13000, awards=2000)
8.	jan2018_6 = Salary(date='2018-01-10', emp_id=6, basic=15000, awards=3000)
9.	jan2018_7 = Salary(date='2018-01-10', emp_id=7, basic=9000, awards=3000)
10.	jan2018_8 = Salary(date='2018-01-10', emp_id=8, basic=13000, awards=2000)
11.	jan2018_9 = Salary(date='2018-01-10', emp_id=9, basic=13000, awards=1500)
12.	session = Session()
13.	sals = [jan2018_1, jan2018_2, jan2018_3,jan2018_4, jan2018_5, jan2018_6, jan2018_7, jan2018_8, jan2018_9]
14.	session.add_all(sals)
15.	session.commit()
16.	session.close()
测试执行结果：
1.	[root@localhost day10]# python3 add_ salary.py
登录数据库查看部门表中数据
1.	MariaDB [tarena]> select * from salary;
2.	+---------+------------+--------+-------+--------+
3.	| auto_id | date       | emp_id | basic | awards |
4.	+---------+------------+--------+-------+--------+
5.	|       1 | 2018-01-10 |      1 | 10000 |   2000 |
6.	|       2 | 2018-01-10 |      2 | 11000 |   1500 |
7.	|       3 | 2018-01-10 |      3 | 11000 |   2200 |
8.	|       4 | 2018-01-10 |      4 | 11000 |   3000 |
9.	|       5 | 2018-01-10 |      1 | 13000 |   2000 |
10.	|       6 | 2018-01-10 |      6 | 15000 |   3000 |
11.	|       7 | 2018-01-10 |      7 |  9000 |   3000 |
12.	|       8 | 2018-01-10 |      8 | 13000 |   2000 |
13.	|       9 | 2018-01-10 |      9 | 13000 |   1500 |
14.	+---------+------------+--------+-------+--------+
15.	9 rows in set (0.00 sec)
数据成功添加
4 案例4：操作数据
4.1 问题
1.	修改部门表，将人事部改为人力资源部 
2.	如果存在设计部，将设计部删除 
3.	查询所有每个员工及其所在部门 
4.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：修改表中的记录，首先需要把记录找到
1.	qset12 = session.query(Department).filter(Department.dep_name=='人事部')
2.	hr = qset12.one()
步骤二：只要把映射的实体类对象重新赋值保存即可
1.	hr.dep_name='人力资源部'
2.	session.commit()
步骤三：删除记录与修改类似，先找到记录再执行删除
1.	qset13 = session.query(Employee).filter(Department.dep_name=='设计部')
2.	dep = qset13.one()
3.	session.delete(dep)
4.	session.commit()
步骤四：查询每个员工所在的部门涉及的是多表查询，因为员工表中只有部门ID，部门名称在部门表中存储
1.	qset10 = session.query(Employee.emp_name, Department.dep_name).join(Department)
2.	for row in qset10:
3.	    print(row)

